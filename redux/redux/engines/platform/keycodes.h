/*
Copyright 2017-2022 Google Inc. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS-IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

#ifndef REDUX_ENGINES_PLATFORM_KEYCODES_H_
#define REDUX_ENGINES_PLATFORM_KEYCODES_H_

#include <bitset>
#include <string>

namespace redux {

enum KeyCode {
  KEYCODE_A,
  KEYCODE_B,
  KEYCODE_C,
  KEYCODE_D,
  KEYCODE_E,
  KEYCODE_F,
  KEYCODE_G,
  KEYCODE_H,
  KEYCODE_I,
  KEYCODE_J,
  KEYCODE_K,
  KEYCODE_L,
  KEYCODE_M,
  KEYCODE_N,
  KEYCODE_O,
  KEYCODE_P,
  KEYCODE_Q,
  KEYCODE_R,
  KEYCODE_S,
  KEYCODE_T,
  KEYCODE_U,
  KEYCODE_V,
  KEYCODE_W,
  KEYCODE_X,
  KEYCODE_Y,
  KEYCODE_Z,
  KEYCODE_0,
  KEYCODE_1,
  KEYCODE_2,
  KEYCODE_3,
  KEYCODE_4,
  KEYCODE_5,
  KEYCODE_6,
  KEYCODE_7,
  KEYCODE_8,
  KEYCODE_9,
  KEYCODE_KP_0,
  KEYCODE_KP_1,
  KEYCODE_KP_2,
  KEYCODE_KP_3,
  KEYCODE_KP_4,
  KEYCODE_KP_5,
  KEYCODE_KP_6,
  KEYCODE_KP_7,
  KEYCODE_KP_8,
  KEYCODE_KP_9,
  KEYCODE_KP_PLUS,
  KEYCODE_KP_MINUS,
  KEYCODE_KP_MULTIPLY,
  KEYCODE_KP_DIVIDE,
  KEYCODE_KP_ENTER,
  KEYCODE_KP_PERIOD,
  KEYCODE_KP_EQUALS,
  KEYCODE_ESCAPE,
  KEYCODE_TAB,
  KEYCODE_RETURN,
  KEYCODE_SPACE,
  KEYCODE_BACKSPACE,
  KEYCODE_COMMA,
  KEYCODE_PERIOD,
  KEYCODE_SLASH,
  KEYCODE_BACKSLASH,
  KEYCODE_COLON,
  KEYCODE_SEMICOLON,
  KEYCODE_LEFT_BRACKET,
  KEYCODE_RIGHT_BRACKET,
  KEYCODE_LEFT_PAREN,
  KEYCODE_RIGHT_PAREN,
  KEYCODE_SINGLE_QUOTE,
  KEYCODE_DOUBLE_QUOTE,
  KEYCODE_BACK_QUOTE,
  KEYCODE_EXCLAMATION,
  KEYCODE_AT,
  KEYCODE_HASH,
  KEYCODE_DOLLAR,
  KEYCODE_PERCENT,
  KEYCODE_CARET,
  KEYCODE_AMPERSAND,
  KEYCODE_ASTERISK,
  KEYCODE_QUESTION,
  KEYCODE_PLUS,
  KEYCODE_MINUS,
  KEYCODE_LESS,
  KEYCODE_EQUALS,
  KEYCODE_GREATER,
  KEYCODE_UNDERSCORE,
  KEYCODE_UP,
  KEYCODE_DOWN,
  KEYCODE_LEFT,
  KEYCODE_RIGHT,
  KEYCODE_CAPS_LOCK,
  KEYCODE_NUM_LOCK,
  KEYCODE_SCROLL_LOCK,
  KEYCODE_PRINT_SCREEN,
  KEYCODE_PAUSE,
  KEYCODE_INSERT,
  KEYCODE_DELETE,
  KEYCODE_HOME,
  KEYCODE_END,
  KEYCODE_PAGEUP,
  KEYCODE_PAGEDOWN,
  KEYCODE_LEFT_CTRL,
  KEYCODE_LEFT_SHIFT,
  KEYCODE_LEFT_ALT,
  KEYCODE_LEFT_GUI,
  KEYCODE_RIGHT_CTRL,
  KEYCODE_RIGHT_SHIFT,
  KEYCODE_RIGHT_ALT,
  KEYCODE_RIGHT_GUI,
  KEYCODE_MODE,
  KEYCODE_F1,
  KEYCODE_F2,
  KEYCODE_F3,
  KEYCODE_F4,
  KEYCODE_F5,
  KEYCODE_F6,
  KEYCODE_F7,
  KEYCODE_F8,
  KEYCODE_F9,
  KEYCODE_F10,
  KEYCODE_F11,
  KEYCODE_F12,
  KEYCODE_F13,
  KEYCODE_F14,
  KEYCODE_F15,
  KEYCODE_F16,
  KEYCODE_F17,
  KEYCODE_F18,
  KEYCODE_F19,
  KEYCODE_F20,
  KEYCODE_F21,
  KEYCODE_F22,
  KEYCODE_F23,
  KEYCODE_F24,
  NUM_KEYCODES,
};

enum KeyModifier {
  KEYMOD_NONE = 0x0000,
  KEYMOD_LSHIFT = 0x0001,
  KEYMOD_RSHIFT = 0x0002,
  KEYMOD_LCTRL = 0x0040,
  KEYMOD_RCTRL = 0x0080,
  KEYMOD_LALT = 0x0100,
  KEYMOD_RALT = 0x0200,
  KEYMOD_LGUI = 0x0400,
  KEYMOD_RGUI = 0x0800,
  KEYMOD_NUM = 0x1000,
  KEYMOD_CAPS = 0x2000,
  KEYMOD_MODE = 0x4000,
};

// Returns a string that represents the combination of all the keys (including
// modifiers) being pressed at the same time.
using KeycodeBitset = std::bitset<NUM_KEYCODES>;
std::string Chord(const KeycodeBitset& keys, const KeyModifier& modifiers);

}  // namespace redux

#endif  // REDUX_ENGINES_PLATFORM_KEYCODES_H_
